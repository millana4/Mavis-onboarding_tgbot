import logging

from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from config import Config
from utils import prepare_telegram_message, normalize_phone

from app.services.cache_access import check_user_access, RESTRICTING_MESSAGE
from app.services.fsm import state_manager, AppStates
from app.seatable_api.api_auth import register_id_messanger, check_id_messanger
from app.seatable_api.api_base import fetch_table
from telegram.keyboards import share_contact_kb
from telegram.handlers.handler_table import handle_table_menu, handle_content_button


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id_telegram
    already_member = await check_id_messanger(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {already_member}")

    if already_member:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        await start_navigation(message=message)
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        await message.answer(
            RESTRICTING_MESSAGE,
            reply_markup=share_contact_kb,
        )


@router.message(F.contact)
async def handle_contact(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    contact = message.contact
    user_id = message.from_user.id

    normalized_phone = normalize_phone(contact.phone_number)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–º–µ—Ä: {contact.phone_number} (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: {normalized_phone})")

    # –î–æ–±–∞–≤–ª—è–µ–º id_messanger –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Seatable
    success = await register_id_messanger(normalized_phone, user_id)

    if success:
        await message.answer(
            "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=ReplyKeyboardRemove()
        )
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        await start_navigation(message=message)
    else:
        await message.answer(
            "üö´ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –±–æ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ —ç–π—á–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=ReplyKeyboardRemove()
        )


async def start_navigation(message: types.Message):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç FSM –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not await check_user_access(message.chat.id):
            await message.answer(
                RESTRICTING_MESSAGE,
                reply_markup=ReplyKeyboardRemove()
            )
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤ start_navigation")
            return
        else:
            logger.info(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        state = await state_manager.set_state(
            message.chat.id,
            AppStates.CURRENT_MENU,
            {
                'current_menu': Config.SEATABLE_MAIN_MENU_ID,
                'navigation_history': [Config.SEATABLE_MAIN_MENU_ID]
            }
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        content, keyboard = await handle_table_menu(Config.SEATABLE_MAIN_MENU_ID, message=message, state=state)

        kwargs = {
            'reply_markup': keyboard,
            'parse_mode': 'HTML'
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if content.get('image_url'):
            await message.answer_photo(
                photo=content['image_url'],
                caption=content.get('text', ''),
                **kwargs
            )
        elif content.get('video_url'):
            await message.answer_video(
                video=content['video_url'],
                caption=content.get('text', ''),
                **kwargs
            )
        elif content.get('text'):
            await message.answer(
                text=content['text'],
                **kwargs
            )
        elif keyboard:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–º–∏
            await message.answer(" ", **kwargs)
        else:
            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ–Ω—é –ø—É—Å—Ç–æ–µ
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", **kwargs)

    except Exception as e:
        logger.error(f"Error in start_navigation for user {message.from_user.id}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(lambda c: c.data == 'back')
async def process_back_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    try:
        user_id = callback_query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not await check_user_access(user_id):
            await callback_query.answer(
                RESTRICTING_MESSAGE,
                show_alert=True
            )
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤ process_back_callback")
            return
        else:
            logger.info(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

        data = await state_manager.get_data(user_id)
        navigation_history = data.get('navigation_history', [])

        if len(navigation_history) <= 1:
            await callback_query.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (–µ—Å–ª–∏ –º—ã –Ω–∞ content)
        current_key = navigation_history[-1]
        button_content = None
        if current_key.startswith('content:'):
            _, current_table_id, current_row_id = current_key.split(':')
            current_table_data = await fetch_table(current_table_id)
            current_row = next((r for r in current_table_data if r['_id'] == current_row_id), None)
            if current_row and current_row.get('Button_content'):
                button_content = prepare_telegram_message(current_row['Button_content'])

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
        previous_key = navigation_history[-2]
        await state_manager.update_data(
            user_id,
            current_menu=previous_key,
            navigation_history=navigation_history[:-1]
        )

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.delete()
        except:
            pass

        # –ï—Å–ª–∏ –±—ã–ª –∫–æ–Ω—Ç–µ–Ω—Ç - –ø–æ—Å—Ç–∏–º –µ–≥–æ Button_content –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if button_content:
            if button_content.get('image_url'):
                await callback_query.message.answer_photo(
                    photo=button_content['image_url'],
                    caption=button_content.get('text', ''),
                    parse_mode="HTML"
                )
            elif button_content.get('text'):
                await callback_query.message.answer(
                    text=button_content['text'],
                    parse_mode="HTML"
                )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
        if previous_key.startswith('content:'):
            _, table_id, row_id = previous_key.split(':')
            content, keyboard = await handle_content_button(table_id, row_id)

            caption = content.get('text', '')
            if content.get('image_url'):
                await callback_query.message.answer_photo(
                    photo=content['image_url'],
                    caption=caption,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                if caption:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                    await callback_query.message.answer(
                        text=caption,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                elif keyboard:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    await callback_query.message.answer(
                        text=' ',
                        reply_markup=keyboard
                    )
        else:
            content, keyboard = await handle_table_menu(previous_key)

            menu_text = content.get('text', '')
            if content and content.get('image_url'):
                await callback_query.message.answer_photo(
                    photo=content['image_url'],
                    caption=menu_text if menu_text else ' ',  # –ü—Ä–æ–±–µ–ª –µ—Å–ª–∏ –ø—É—Å—Ç–æ
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                if menu_text:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                    await callback_query.message.answer(
                        text=menu_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                elif keyboard:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    await callback_query.message.answer(
                        text=' ',
                        reply_markup=keyboard
                    )

        await callback_query.answer()

    except Exception as e:
        logger.error(f"Back error: {str(e)}", exc_info=True)
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", show_alert=True)
