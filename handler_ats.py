import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import StateFilter

from config import Config
from handlers import start_navigation
from keyboards import search_kb, BTN_DEPARTMENT_SEARCH, BTN_EMPLOYEE_SEARCH, BTN_BACK

router = Router()
logger = logging.getLogger(__name__)


# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchState(StatesGroup):
    waiting_for_search_type = State()
    waiting_for_name_search = State()
    waiting_for_department_search = State()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@router.callback_query(lambda c: c.data.startswith('ats:'))
async def process_ats_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = await state.get_data()
        navigation_history = data.get('navigation_history', [Config.SEATABLE_MAIN_MENU_ID])
        ats_tag = callback_query.data.split(':')[1]
        navigation_history.append(ats_tag)

        await state.update_data(
            current_menu=ats_tag,
            navigation_history=navigation_history
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            await callback_query.message.delete()
        except:
            pass

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫ –æ–Ω —Ö–æ—á–µ—Ç –∏—Å–∫–∞—Ç—å
        await callback_query.message.answer(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
            reply_markup=search_kb
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        await state.set_state(SearchState.waiting_for_search_type)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {SearchState.waiting_for_search_type}")

        await callback_query.answer()

    except Exception as e:
        logger.error(f"ATS callback error: {str(e)}", exc_info=True)
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ò—Å–∫–∞—Ç—å –ø–æ –§–ò–û"
@router.message(StateFilter(SearchState.waiting_for_search_type), F.text == BTN_EMPLOYEE_SEARCH)
async def handle_name_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û"""
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –§–ò–û
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–∞–º–∏–ª–∏—é –∏/–∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤ –∏–ª–∏ –°–º–∏—Ä–Ω–æ–≤ –ò–≤–∞–Ω, "
            "–∏–ª–∏ –°–º–∏—Ä–Ω–æ–≤, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ò–≤–∞–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –§–ò–û
        await state.set_state(SearchState.waiting_for_name_search)

    except Exception as e:
        logger.error(f"Name search error: {str(e)}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ò—Å–∫–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—É"
@router.message(StateFilter(SearchState.waiting_for_search_type), F.text == BTN_DEPARTMENT_SEARCH)
async def handle_department_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É"""
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞.",
            reply_markup=ReplyKeyboardRemove()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–¥–µ–ª–∞
        await state.set_state(SearchState.waiting_for_department_search)

    except Exception as e:
        logger.error(f"Department search error: {str(e)}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
@router.message(StateFilter(SearchState.waiting_for_search_type), F.text == BTN_BACK)
async def handle_back_from_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=ReplyKeyboardRemove()
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        await state.clear()
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–æ")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await start_navigation(message=message, state=state)

    except Exception as e:
        logger.error(f"Back from search error: {str(e)}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
@router.message(
    StateFilter(
        SearchState.waiting_for_name_search,
        SearchState.waiting_for_department_search
    ),
    F.text == BTN_BACK
)
async def handle_back_from_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –§–ò–û –∏–ª–∏ –æ—Ç–¥–µ–ª–∞"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        await message.answer(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
            reply_markup=search_kb
        )
        await state.set_state(SearchState.waiting_for_search_type)

    except Exception as e:
        logger.error(f"Back from input error: {str(e)}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∏—Å–∫–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@router.message(StateFilter(SearchState.waiting_for_name_search))
async def process_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    try:
        search_query = message.text.strip()

        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        if not search_query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
            return

        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –§–ò–û: {search_query}")

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û
        # employees = await get_employee_by_name(search_query)

        # –í—Ä–µ–º–µ–Ω–Ω–æ: –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(f"üîç –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {search_query}")

        # –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        # await give_employee_data(message, employees, state)

        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        await message.answer(
            "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
            reply_markup=search_kb
        )
        await state.set_state(SearchState.waiting_for_search_type)

    except Exception as e:
        logger.error(f"Name input processing error: {str(e)}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ç–¥–µ–ª–∞
@router.message(StateFilter(SearchState.waiting_for_department_search))
async def process_department_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç–¥–µ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    try:
        department = message.text.strip()

        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        if not department:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞:")
            return

        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É: {department}")

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É
        # employees = await get_employee_by_department(department)

        # –í—Ä–µ–º–µ–Ω–Ω–æ: –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(f"üè¢ –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ—Ç–¥–µ–ª–µ: {department}")

        # –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        # await give_employee_data(message, employees, state)

        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        await message.answer(
            "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
            reply_markup=search_kb
        )
        await state.set_state(SearchState.waiting_for_search_type)

    except Exception as e:
        logger.error(f"Department input processing error: {str(e)}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")



@router.message()
async def fallback_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logger.warning(f"[FALLBACK] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text!r} –ø—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    await message.answer("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª.")